#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e9
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

#define INT_SIZE 32

struct TrieNode
{
    int value;
    TrieNode *ar[2];
};

TrieNode *newNode()
{
    TrieNode *temp = new TrieNode;
    temp->value = 0;
    temp->ar[0] = temp->ar[1] = NULL;
    return temp;
}

void insert(TrieNode *root, int pre_xor)
{
    TrieNode *temp = root;

    for(int i = INT_SIZE - 1; i >= 0; i--)
    {
        bool val = pre_xor & (1 << i);
        if(temp->ar[val] == NULL)
            temp->ar[val] = newNode();
        temp = temp->ar[val];
    }

    temp->value = pre_xor;
}

int query(TrieNode *root, int pre_xor)
{
    TrieNode *temp = root;
    for(int i = INT_SIZE - 1; i >= 0; i--)
    {
        bool val = pre_xor & (1 << i);
        if(temp->ar[1-val] != NULL)
            temp = temp->ar[1-val];
        else if(temp->ar[val] != NULL)
            temp = temp->ar[val];
    }
    return pre_xor ^ (temp->value);
}


int maxSubarrayXOR(int ar[], int n)
{
    TrieNode *root = newNode();
    insert(root, 0);

    int res = INT_MIN, pre_xor = 0;
    for(int i = 0; i < n; i++)
    {
        pre_xor = pre_xor ^ ar[i];
        insert(root, pre_xor);

        res = max(res, query(root, pre_xor));
    }
    return res;
}

void solve()
{
    int n;
    cin >> n;
    int a[n+2];
    for(int i = 0; i < n; i++)
        cin >> a[i];

    cout << maxSubarrayXOR(a,n) << endl;
}



int main()
{

    fast;

    int t;

    cin>>t;

    while(t--)
        solve();
}