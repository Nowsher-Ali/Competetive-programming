#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e12
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

const int mx = 200002;
int n,q;
vector<int>g[mx];
bool vis[mx];
int st[mx], en[mx], ft[2*mx];
ll seg[8*mx],lazy[8*mx];
int tim = 1;

void dfs(int node)
{
    vis[node] = 1;
    st[node] = tim;
    ft[tim] = node;
    tim++;

    for(int child: g[node])
    {
        if(!vis[child])
            dfs(child);
    }

    en[node] = tim;
    ft[tim] = node;
    tim++;
}

void build(int ind,int low,int high)
{
    if(low==high)
    {
        seg[ind]=ft[low];
        return;
    }
    int mid=(low+high)/2;
    build(2*ind+1,low,mid);
    build(2*ind+2,mid+1,high);
    seg[ind]=seg[2*ind+1]+seg[2*ind+2]; //stores sum of left and right child
}

ll GetSum(int ind,int low,int high,int l,int r)
{
    if(low>=l && high<=r)
        return seg[ind];

    if(high<l || low>r)
        return 0;
    int mid=(low+high)/2;
    ll left=GetSum(2*ind+1,low,mid,l,r);
    ll right=GetSum(2*ind+2,mid+1,high,l,r);
    return left+right;
}

void pointUpdate(int ind, int low,int high, int node, int val)
{
    if(low==high)
    {
        ft[node]=val;
        seg[ind]=val;
    }
    else
    {
        int mid=(low+high)/2;
        if(node<=mid && node>=low)
            pointUpdate(2*ind+1, low, mid, node, val);
        else
            pointUpdate(2*ind+2, mid+1, high, node, val);
        seg[ind] = seg[2*ind+1] + seg[2*ind+2];
    }
}

void solve()
{
    cin>>n>>q;

    vector<ll>v;

    for(int i=0; i<n; i++)
    {
        ll x;
        cin>>x;
        v.pb(x);
    }

    for(int i=0; i<n-1; i++)
    {
        int x,y;
        cin>>x>>y;
        g[x].pb(y);
        g[y].pb(x);
    }

    dfs(1);

    for(int i=1; i<tim; i++)
    {
        ft[i] = v[ft[i]-1];
        //cout<<ft[i]<<" ";
    }
    //cout<<endl;

    build(1,1,2*n);

    while(q--)
    {
        int a,b;
        cin>>a>>b;

        if(a==1)
        {
            int c;
            cin>>c;
            pointUpdate(1,1,2*n,st[b],c);
            pointUpdate(1,1,2*n,en[b],c);
        }
        else
        {
            //cout<<st[b]<<" "<<en[b]<<endl;
            cout<<GetSum(1,1,2*n,st[b],en[b])/2<<endl;
        }
    }

}


int main()
{

    fast;

    int t=1;

    //cin>>t;

    while(t--)
        solve();
}

