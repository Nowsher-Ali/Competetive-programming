#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e18
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

ll arr[200002],seg[4*200002];

void build(int ind,int low,int high)
{
    if(low==high)
    {
        seg[ind]=arr[low];
        return;
    }
    int mid=(low+high)/2;
    build(2*ind+1,low,mid);
    build(2*ind+2,mid+1,high);
    seg[ind]=seg[2*ind+1]+seg[2*ind+2]; //stores sum of left and right child
}

ll query(int ind,int low,int high,int l,int r)
{
    if(low>=l && high<=r)
        return seg[ind];

    if(high<l || low>r)
        return 0;
    int mid=(low+high)/2;
    ll left=query(2*ind+1,low,mid,l,r);
    ll right=query(2*ind+2,mid+1,high,l,r);
    return left+right;
}

void solve()
{
    int n,q;

    cin>>n>>q;

    for(int i=0;i<n;i++)
        cin>>arr[i];
    build(0,0,n-1);

    while(q--)
    {
        int l,r;
        cin>>l>>r;
        l--;
        r--;
        cout<<query(0,0,n-1,l,r)<<endl;
    }
}


int main()
{

    fast;

    int t=1;

    while(t--)
        solve();
}


