#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e12
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

const int maxN = 200001;
ll ar[maxN];
ll st[4*maxN] , lazy[4*maxN];

void build(int si , int ss , int se)
{
	if(ss == se)
	{
		st[si] = ar[ss];
		return;
	}

	int mid = (ss + se) / 2;

	build(2*si , ss , mid);
	build(2*si+1 , mid+1 , se);

	st[si] = st[2*si] + st[2*si+1];
}

ll query(int si , int ss , int se , int qs , int qe)
{
	if(lazy[si] != 0)
	{
		ll dx = lazy[si];
		lazy[si] = 0;
		st[si] += dx * (se - ss + 1);

		if(ss != se)
		lazy[2*si] += dx , lazy[2*si+1] += dx;
	}

	if(ss > qe || se < qs) return 0;

	if(ss >= qs && se <= qe)
	return st[si];

	int mid = (ss + se) / 2;
	return query(2*si , ss , mid , qs , qe) + query(2*si+1 , mid+1 , se , qs , qe);
}

void update(int si , int ss , int se , int qs , int qe , int val)
{
	if(lazy[si] != 0)
	{
		ll dx = lazy[si];
		lazy[si] = 0;
		st[si] += dx * (se - ss + 1);

		if(ss != se)
		lazy[2*si] += dx , lazy[2*si+1] += dx;
	}

	if(ss > qe || se < qs) return;

	if(ss >= qs && se <= qe)
	{
		ll dx = (se - ss + 1) * val;
		st[si] += dx;

		if(ss != se)
		lazy[2*si] += val , lazy[2*si+1] += val;
		return;
	}

	int mid = (ss + se) / 2;
	update(2*si , ss , mid , qs , qe , val);
	update(2*si+1 , mid+1 , se , qs , qe , val);

	st[si] = st[2*si] + st[2*si+1];
}

void solve()
{

	int n , q , code , l , r , val;
	cin>>n>>q;
	for(int i=1;i<=n;i++)
        cin>>ar[i];

	build(1 , 1 , n);

	while(q--)
	{
		cin>>code;
		if(code == 2)
		{
		    int k;
			cin>>k;
			cout<<query(1 , 1 , n , k , k)<<endl;
		}
		else
		{
			cin>>l>>r>>val;
			update(1 , 1 , n , l , r , val);
		}
	}
}


int main()
{

    fast;

    int t=1;

    //cin>>t;

    while(t--)
        solve();
}

