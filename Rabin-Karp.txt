#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e18
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

using namespace std;
ll dp[1000001];
ll P[1000001];
const int mod = 1000000007;

// Patter * Power[L] = dp[R]-dp[L-1]

ll power(ll a , ll n)
{
	ll result = 1;

	while(n)
	{
		if(n & 1) result = (result * a) % mod;

		n >>= 1;
		a = (a * a) % mod;
	}

	return result;
}


void init(string input_string)
{
	ll p = 31;
	ll p_power = 1;
	P[0] = 1;
	dp[0] = (input_string[0] - 'a' + 1);


	for(int i=1;i<input_string.size();i++)
	{
		char ch = input_string[i];

		p_power = (p_power * p) % mod;
		P[i] = p_power;

		dp[i] = (dp[i-1] + (ch - 'a' + 1)*p_power) % mod;
	}
}

ll getHash(string key)
{
	ll value = 0;
	ll p = 31;
	ll p_power = 1;

	for(char ch : key)
	{
		value = (value + (ch - 'a' + 1)*p_power) % mod;
		p_power = (p_power * p) % mod;
	}

	return value;
}

ll substringHash(int L , int R)
{
	ll result = dp[R];

	if(L > 0) result = (result - dp[L-1] + mod) % mod;

	//result = (result * P[L]) % mod;

	return result;
}

int main()
{
	string haystack , needle;
	int n , L , R , answer;
	bool flag = false;

	while(cin>>n)
	{
		cin>>needle;
		cin>>haystack;
        init(haystack);

		ll needleHash = getHash(needle);


		for(L=0 , R=needle.size()-1; R < haystack.size(); L++ , R++)
		{
		    ll x = (needleHash*P[L])%mod;
			if(x == substringHash(L , R))
			cout<<L<<endl;
		}

		cout<<endl;
	}
}
