#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e18
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

const int mx=100001;
const int BLK = 700;
const int maxN = 21;
int n,m;
vector<int>g[mx];
int FlatTree[2*mx],startTime[mx],endTime[mx],ans[2*mx],nodeCnt[mx],nodeV[mx],resF[mx];
int level[mx], LCA[mx][maxN];
int timer=1;

void dfs(int node, int par, int lvl)
{
    level[node] = lvl;
    LCA[node][0] = par;

    startTime[node] = timer;
    FlatTree[timer] = node;
    timer++;

    for(int child : g[node])
        if(child != par)
            dfs(child, node, lvl+1);

    endTime[node] = timer;
    FlatTree[timer] = node;
    timer++;
}

int getLCA(int a, int b)
{
    if(level[a] > level[b])
        swap(a, b);

    int d = level[b] - level[a];

    int f = 0;

    while(d)
    {
        if(d & 1)
            b = LCA[b][f];

        d >>= 1;
        f++;
    }

    if(a == b)
        return a;

    for(int j=maxN-1; j>=0; j--)
        if(LCA[a][j] != -1 && (LCA[a][j] != LCA[b][j]))
            a = LCA[a][j], b = LCA[b][j];

    return LCA[a][0];
}

struct query
{
    int l;
    int r;
    int c;
    int idx;
    int lca;
};

query Q[2*mx];

bool comp(query a, query b)
{
    int x = a.l / BLK;
    int y = b.l / BLK;

    if(x != y) return x < y;
    else
        return a.r < b.r;
}



void add(int idx)
{
    int node = FlatTree[idx];
    nodeCnt[node]++;

    if(nodeCnt[node] == 1)
    {
        int c = nodeV[node];
        resF[c]++;
    }
    else
    {
        int c = nodeV[node];
        resF[c]--;
    }
}
void Remove(int idx)
{
    int node = FlatTree[idx];
    nodeCnt[node]--;

    if(nodeCnt[node] == 1)
    {
        int c = nodeV[node];
        resF[c]++;
    }
    else
    {
        int c = nodeV[node];
        resF[c]--;
    }
}


void solve()
{

    for(int i=0; i<=n; i++)
    {
        g[i].clear();
        level[i]=0;
        nodeCnt[i]=0;
        resF[i]=0;
    }

    for(int i=0; i<=m; i++)
        ans[i]=0;

    for(int i=1; i<=n; i++)
        cin>>nodeV[i];

    for(int i=0; i<n-1; i++)
    {
        int x,y;
        cin>>x>>y;
        g[x].pb(y);
        g[y].pb(x);
    }

    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<maxN;j++)
            LCA[i][j]=-1;
    }
    timer=1;
    dfs(1,-1,0);

    for(int j=1; j<maxN; j++)
    {
        for(int i=1; i<=n; i++)
            if(LCA[i][j-1] != -1)
            {
                LCA[i][j] = LCA[LCA[i][j-1]][j-1];
            }
    }

    for(int i=1; i<=m; i++)
    {
        int a,b,c;
        cin>>a>>b>>c;
        if(startTime[a] > startTime[b])
            swap(a, b);

        int lca = getLCA(a, b);

        Q[i].idx = i, Q[i].c = c;

        //first type of query
        if(a == lca)
            Q[i].l = startTime[a], Q[i].r = startTime[b], Q[i].lca = -1;

        //second type of query
        else
            Q[i].l = endTime[a], Q[i].r = startTime[b], Q[i].lca = lca;
    }

    sort(Q+1,Q+m+1,comp);
    int ML = 1, MR = 0;

    for(int i=1; i<=m; i++)
    {
        int L = Q[i].l;
        int R = Q[i].r;
        int c = Q[i].c;
        int lca = Q[i].lca;
        int idx = Q[i].idx;

        while(MR < R)
            MR++, add(MR);

        while(ML > L)
            ML--, add(ML);

        while(MR > R)
            Remove(MR), MR--;

        while(ML < L)
            Remove(ML), ML++;

        if(resF[c] > 0)
            ans[idx] = 1;

        if((lca != -1) && (nodeV[lca] == c))
            ans[idx] = 1;
    }

    for(int i=1; i<=m; i++)
    {
        if(ans[i])
            cout<<"Find"<<endl;
        else
            cout<<"NotFind"<<endl;
    }
}


int main()
{
    //fast;

    int t=0;

    //cin>>t;

    while(cin>>n)
    {
        if(t>0)
            cout<<endl;
        t++;
        cin>>m;
        solve();
    }
}
