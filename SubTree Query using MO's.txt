#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e18
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

const int mx=100003;
const int BLK = 700;
int n,m;
vector<int>g[mx];
int color[mx], FlatTree[2*mx],startTime[mx],endTime[mx],ans[mx],nodeCnt[mx],colorF[mx],FF[mx],Sum[mx];
bool vis[mx];
int timer=1;

void dfs(int node)
{
    vis[node]=1;
    startTime[node]=timer;
    FlatTree[timer]=node;
    timer++;

    for(int child:g[node])
    {
        if(!vis[child])
        {
            dfs(child);
        }
    }

    endTime[node]=timer;
    FlatTree[timer]=node;
    timer++;
}


struct query
{
    int l;
    int r;
    int idx;
    int k;
};

query Q[mx];

bool comp(query a, query b)
{
    int x = a.l/BLK;
    int y = b.l/BLK;

    if(x != y)
        return x < y;

    if(x % 2)
        return a.r < b.r;
    else
        return a.r > b.r;
}

int getBlock(int idx)
{
	return (idx + BLK - 1) / BLK;
}

void add(int pos)
{
    int node=FlatTree[pos];
    int c=color[node];
    nodeCnt[node]++;

    if(nodeCnt[node]==2)
    {
        colorF[c]++;
        FF[colorF[c]]++;
        Sum[getBlock(colorF[c])]++;
        FF[colorF[c]-1]--;
        Sum[getBlock(colorF[c]-1)]--;
    }
}

void Remove(int pos)
{
    int node=FlatTree[pos];
    int c=color[node];
    nodeCnt[node]--;

    if(nodeCnt[node]==1)
    {
        colorF[c]--;
        FF[colorF[c]]++;
        Sum[getBlock(colorF[c])]++;
        FF[colorF[c]+1]--;
        Sum[getBlock(colorF[c]+1)]--;
    }
}

int getAns(int l , int r)
{
	int ans = 0;

	int LB = getBlock(l);
	int RB = getBlock(r);

    if(LB==RB)
    {
        for(int i=l;i<=r;i++)
            ans+=FF[i];
    }
    else
    {
        for(int i=l;i<=LB*BLK;i++)
            ans+=FF[i];
        for(int i=LB+1;i<RB;i++)
            ans+=Sum[i];
        for(int i=RB*BLK+1;i<=r;i++)
            ans+=FF[i];
    }
    return ans;
}

void solve()
{
    cin>>n>>m;

    for(int i=1; i<=n; i++)
        cin>>color[i];

    for(int i=0;i<n-1;i++)
    {
        int x,y;
        cin>>x>>y;
        g[x].pb(y);
        g[y].pb(x);
    }
    dfs(1);

    for(int i=1; i<=m; i++)
    {
        int x,y;
        cin>>x>>y;
        Q[i].l=startTime[x];
        Q[i].r=endTime[x];
        Q[i].idx=i;
        Q[i].k=y;
    }

    sort(Q+1, Q+1+m, comp);

    int ML = 1 , MR = 0;
    for(int i=1; i<=m; i++)
    {
        int L = Q[i].l;
        int R = Q[i].r;
        int idx = Q[i].idx;
        int k = Q[i].k;

        while(ML > L)
        {
            ML--;
            add(ML);
        }


        while(MR < R)
        {
            MR++;
            add(MR);
        }

        while(ML < L)
        {
            Remove(ML);
            ML++;
        }

        while(MR > R)
        {
            Remove(MR);
            MR--;
        }

        ans[idx] = getAns(k, n);
    }

    for(int i=1;i<=m;i++)
        cout<<ans[i]<<endl;
}


int main()
{
    fast;

    int t=1;

    //cin>>t;

    while(t--)
    {
        solve();
    }
}
