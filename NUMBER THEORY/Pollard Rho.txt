#include <bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define ff first
#define ss second
#define endl "\n"
#define ull unsigned long long
///#include <ext/pb_ds/assoc_container.hpp>
///#include <ext/pb_ds/tree_policy.hpp>
///using namespace __gnu_pbds;
using namespace std;
///typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
namespace ftor
{
#define MLIM 1000 /// Used in Brent Pollard Rho
#define PLIM 10 /// Miller-Rabin Test depth
#define MAX 10000 /// Small primes generated in this range
#define SQR 101 /// Square root of MAX
int p,P[MAX];
bitset<MAX>prime;
unordered_map<ll,ll> mp;
inline void Sieve()
{
    int i,j,d;
    prime.reset();
    prime[2] = true;
    for (i = 3; i<MAX; i++,i++)
        prime[i]=true;
    for (i=3; i<SQR;)
    {
        d=i<<1;
        for (j=(i*i); j<MAX; j+=d)
            prime[j]=false;
        do
        {
            i++;
        }
        while(!prime[++i]);
    }
    p=0;
    for(i=0; i<MAX; i++)
    {
        if(prime[i])
            P[p++]=i;
    }
}
inline ll mul(ll a,ll b,ll MOD)
{
    long double res = a;
    res *= b;
    ll c = (ll)(res / MOD);
    a*=b;
    a-=c*MOD;
    if(a>=MOD)
        a-=MOD;
    if(a<0)
        a+=MOD;
    return a;
}
inline ll expo(ll x,ll n,ll m)
{
    ll res = 1;
    while(n)
    {
        if(n&1)
            res=mul(res, x, m);
        x = mul(x,x,m);
        n>>=1;
    }
    return(res%m);
}
inline bool miller_rabin(ll p,int lim)
{
    ll a, s, m, x, y;
    s=p-1,y=p-1;
    while (!(s&1))
        s>>=1;
    while(lim--)
    {
        x=s;
        a=(((rand()<<15)^rand())%y)+1;
        m=expo(a,x,p);
        while((x!=y)&&(m!=1)&&(m!=y))
        {
            m=mul(m,m,p);
            x<<= 1;
        }
        if((m!=y)&&!(x&1))
            return false;
    }
    return true;
}
inline ull gcd(ull u,ull v)
{
    if (!u)
        return v;
    if (!v)
        return u;
    if (u==1||v==1)
        return 1;
    int shift=__builtin_ctzll(u | v);
    u>>=__builtin_ctzll(u);
    do
    {
        v>>=__builtin_ctzll(v);
        if(u>v)
            v^=u^=v^=u;
        v=v-u;
    }
    while(v);
    return u<<shift;
}
inline ll brent_pollard_rho(ll n)
{
    if (miller_rabin(n,PLIM))
        return n;
    const ll m = MLIM;
    ll i, k, a, x, y, ys, r, q, g;
    g=mp[n];
    if(g)
        return g;
    do
    {
        a=((rand()<<15)^rand())%n;
    }
    while(!a||a==(n-2));
    r=1,q=1;
    y=((rand()<<15)^rand())%n;
    do
    {
        x=y;
        for(i=0; i<r; i++)
        {
            y=mul(y,y,n);
            y+=a;
            if(y<a)
                y+=(ULLONG_MAX-n)+1;
            y%=n;
        }
        k=0;
        do
        {
            for (i=0; (i<m)&&(i<(r-k)); i++)
            {
                ys=y;
                y=mul(y,y,n)+a;
                if(y<a)
                    y+=(ULLONG_MAX-n)+1;
                y%=n;
                q=mul(q,abs(x-y),n);
            }
            g=gcd(q,n);
            k+=m;
        }
        while((k<r)&&(g==1));
        r<<=1;
    }
    while(g==1);
    if(g==n)
    {
        do
        {
            ys=mul(ys,ys,n)+a;
            if(ys<a)
                ys+=(ULLONG_MAX-n)+1;
            ys%=n;
            g=gcd(abs(x - ys), n);
        }
        while(g==1);
    }
    return(mp[n]=g);
}
vector<ll>factorize(ll n)
{
    int i, d, len;
    ll m, k, x;
    vector<ll>v,factors;
    for(i=0; i<p; i++)
    {
        while(!(n % P[i]))
        {
            n/=P[i];
            v.push_back(P[i]);
        }
    }
    if(n==1)
        return v;
    x=brent_pollard_rho(n);
    factors.push_back(x);
    factors.push_back(n / x);
    len=factors.size();
    do
    {
        m=factors[len - 1];
        factors.pop_back(), len--;
        if(m>1)
        {
            if(miller_rabin(m,PLIM))
            {
                v.push_back(m);
                for(i=0; i<len; i++)
                {
                    k=factors[i];
                    while(!(k % m))
                    {
                        k/=m;
                        v.push_back(m);
                    }
                    factors[i] = k;
                }
            }
            else
            {
                x=brent_pollard_rho(m);
                factors.push_back(x);
                factors.push_back(m/x);
                len+=2;
            }
        }
    }
    while(len);
    sort(v.begin(),v.end());
    return v;
}
void init()
{
    Sieve();
    mp.clear();
    srand(time(0));
}
}
ll counts(vector<ll>&vec,ll n)
{
    ll odd=0,even=0,counter,i,j,p=1,pow_set_size=(1<<(ll)vec.size());
    for(counter=1; counter<pow_set_size; counter++)
    {
        p=1;
        for(j=0; j<vec.size(); j++)
        {
            if(counter&(1<<j))
            {
                p*=vec[j];
            }
        }
        if(__builtin_popcount(counter)&1)
            odd+=(n/p);
        else
            even+=(n/p);
    }

    return n-(odd-even);
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ftor::Sieve();
    int test,tc=1;
    cin>>test;
    while(test--)
    {
        ll a,b,c;
        cin>>a>>b>>c;
        if(a<b)
            swap(a,b);
        ll ans;
        if(a==b && a!=1)
        {
            ans=0;
        }
        else if(a==b&&a==1)
        {
            ans=1;
        }
        else
        {
            vector<ll>vec=ftor::factorize(a-b);
            vec.erase(unique(vec.begin(),vec.end()),vec.end());
            ll r=b+c;
            ll l=b-1;
            ans=counts(vec,r);
            ans-=counts(vec,l);
        }
        cout<<"Case "<<tc++<<": "<<ans<<endl;
    }
    return 0;
}
