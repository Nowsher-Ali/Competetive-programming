#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e12
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)

const int mx=200002;

ll arr[mx],seg[4*mx],lazy[4*mx];

void build(int ind,int low,int high)
{
    if(low==high)
    {
        seg[ind]=arr[low];
        return;
    }
    int mid=(low+high)/2;
    build(2*ind+1,low,mid);
    build(2*ind+2,mid+1,high);
    seg[ind]=seg[2*ind+1]+seg[2*ind+2]; //stores sum of left and right child
}

ll query(int ind,int low,int high,int l,int r)
{
    if(low>=l && high<=r)
        return seg[ind];

    if(high<l || low>r)
        return 0;
    int mid=(low+high)/2;
    ll left=query(2*ind+1,low,mid,l,r);
    ll right=query(2*ind+2,mid+1,high,l,r);
    return left+right;
}

void pointUpdate(int ind, int low,int high, int node, int val)
{
    if(low==high)
    {
        arr[node]=val;
        seg[ind]=val;
    }
    else
    {
        int mid=(low+high)/2;
        if(node<=mid && node>=low)
            pointUpdate(2*ind+1, low, mid, node, val);
        else
            pointUpdate(2*ind+2, mid+1, high, node, val);
        seg[ind] = seg[2*ind+1] + seg[2*ind+2];
    }
}

void solve()
{

    int n,q;

    cin>>n>>q;

    for(int i=1;i<=n;i++)
        cin>>arr[i];
    build(1,1,n);
    while(q--)
    {
        int a,b,c;
        cin>>a>>b>>c;
        if(a==1)
        {
            pointUpdate(1,1,n,b,c);
        }
        else
        {
            cout<<query(1,1,n,b,c)<<endl;
        }
    }
}


int main()
{

    fast;

    int t=1;

    //cin>>t;

    while(t--)
        solve();
}

