#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
#define MOD              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e18
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"
#define pi               2*acos(0.0)


void solve()
{

    int n,m;
    cin >> n >> m;
    vector<pair<int,int> > g[n+1];

    int a,b,wt;
    for(int i = 0; i<m ; i++)
    {
        cin >> a >> b >> wt;
        g[a].pb({b,wt});
        g[b].pb({a,wt});
    }

    int parent[n+1];

    int key[n+1];

    bool mstSet[n+1];

    for (int i = 0; i <=n; i++)
        key[i] = INT_MAX, mstSet[i] = false;

    priority_queue< pair<int,int>, vector <pair<int,int> >, greater<pair<int,int> > > pq;

    key[1] = 0;
    parent[1] = -1;
    pq.push({0, 1});
    while(!pq.empty())
    {
        int u = pq.top().second;
        pq.pop();

        mstSet[u] = true;

        for(int i=0; i<g[u].size(); i++)
            {
                int v = g[u][i].ff;
                int weight = g[u][i].ss;
                if (mstSet[v] == false && weight < key[v])
                {
                    parent[v] = u;
                    key[v] = weight;
                    pq.push({key[v], v});
                }
            }

    }

    for(int i=1; i<=n; i++)
        cout<<key[i]<<" ";
    cout<<endl;
}


int main()
{

    fast;

    int t;

    cin>>t;

    while(t--)
        solve();

    return 0;
}


