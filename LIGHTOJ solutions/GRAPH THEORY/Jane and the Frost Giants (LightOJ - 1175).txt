#include<bits/stdc++.h>
using namespace std;

#define ll               long long
#define ull              unsigned long long
#define pll              pair <long long,long long>
#define IM               INT_MAX
#define Im               INT_MIN
#define fast             ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define read             freopen("input.txt", "r", stdin)
#define write            freopen("output.txt", "w", stdout)
#define pb               push_back
#define all(v)           sort(v.begin(),v.end())
#define rall(v)          sort(v.rbegin(),v.rend())
#define rev(v)           reverse(v.begin(),v.end())
#define ff               first
#define ss               second
//#define mod              1000000007
#define lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define INF              1e18
#define mem(a, b)        memset(a, b, sizeof(a))
#define endl             "\n"

char g[205][205];
int disf[205][205],disj[205][205],cs=1;
bool vis[205][205];

const int dx[]={+1,-1,+0,+0};
const int dy[]={+0,+0,+1,-1};

bool isvalid(int x1,int y1,int n,int m)
{
    if( (x1>=1 && x1<=n) && (y1>=1 && y1<=m) && g[x1][y1]!='#')
        return true;
    return false;
}

void bfsf(vector<pair<int,int> >v,int n,int m)
{
    queue<pair<int,int> >q;

    for(int i=0;i<v.size();i++)
    {
        q.push({v[i].ff,v[i].ss});
        disf[v[i].ff][v[i].ss]=0;
        vis[v[i].ff][v[i].ss]=1;
    }

    while(!q.empty())
    {
        int x=q.front().ff;
        int y=q.front().ss;
        q.pop();
        for(int i=0;i<4;i++)
        {
            int x1=x+dx[i];
            int y1=y+dy[i];
            if(isvalid(x1,y1,n,m) && vis[x1][y1]==0)
            {
                q.push({x1,y1});
                vis[x1][y1]=1;
                disf[x1][y1]=disf[x][y]+1;
            }
        }
    }
}

bool escape(int x,int y,int n,int m)
{
    if(x<1 || x>n || y<1 || y>m)
        return 1;
    return 0;
}

int bfsj(int stx,int sty,int n,int m)
{
    queue<pair<int,int> >q;

    q.push({stx,sty});
    vis[stx][sty]=1;
    disj[stx][sty]=0;
    while(!q.empty())
    {
        int x=q.front().ff;
        int y=q.front().ss;
        q.pop();
        for(int i=0;i<4;i++)
        {
            int x1=x+dx[i];
            int y1=y+dy[i];
            if(escape(x1,y1,n,m))
                return (disj[x][y]+1);
            if(isvalid(x1,y1,n,m) && vis[x1][y1]==0)
            {
                if(disj[x][y]+1<disf[x1][y1])
                {
                    q.push({x1,y1});
                    vis[x1][y1]=1;
                    disj[x1][y1]=disj[x][y]+1;
                }
            }
        }
    }
    return -1;
}
void solve()
{
    mem(vis,0);
    int n,m;

    cin>>n>>m;

    vector<pair<int,int> >v;

    int stx,sty;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            cin>>g[i][j];
            if(g[i][j]=='F')
                v.pb({i,j});
            else if(g[i][j]=='J')
            {
                stx=i;
                sty=j;
            }
        }
    }

    mem(disf,0);
    mem(disj,0);
    mem(vis,0);
    bfsf(v,n,m);

    mem(vis,0);

    int ans=bfsj(stx,sty,n,m);

    cout<<"Case "<<cs++<<": ";
    if(ans==-1)
        cout<<"IMPOSSIBLE"<<endl;
    else
        cout<<ans<<endl;

}

int main()
{

    fast;

    int t;

    cin>>t;

    while(t--)
        solve();

    return 0;
}